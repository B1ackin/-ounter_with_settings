{"version":3,"sources":["Tablo.tsx","Buttons.tsx","Counter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Tablo","props","className","maxCounterValue","counter","startCounterValue","Button","onClick","addCounter","disabled","reset","Counter","useState","startValue","setStartValue","MaxValue","setMaxValue","MaxValueInput","StartValueInput","disableBtn","type","value","onChange","e","Number","currentTarget","getMaxValue","setCounterText","getStartValue","setCountValue","App","setCounter","setMaxCounterValue","setStartCounterValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAsBeA,MAXf,SAAeC,GAGX,OACI,yBAAKC,UAAW,gBACZ,0BAAMA,UAAWD,EAAME,kBAAoBF,EAAMG,QAAU,QAAU,IAAKH,EAAMI,kBAAoB,GAAKJ,EAAMI,mBAAqBJ,EAAME,gBAAkB,QAAUF,EAAMG,WCYzKE,MAhBf,SAAgBL,GACZ,OACI,6BACI,4BAAQC,UAAW,YAAaK,QAASN,EAAMO,WAAYC,SAAUR,EAAME,kBAAoBF,EAAMG,SAArG,OACA,4BAAQF,UAAW,eAAgBK,QAASN,EAAMS,MAAOD,SAA4B,IAAlBR,EAAMG,SAAzE,WCHCO,EAAU,SAACV,GAAwB,IAAD,EACPW,mBAAS,GADF,mBACpCC,EADoC,KACxBC,EADwB,OAEXF,mBAAS,GAFE,mBAEpCG,EAFoC,KAE1BC,EAF0B,KAkBvCC,EAAgBF,EAAW,GAAKF,GAAcE,EAAW,QAAU,GACnEG,EAAkBL,EAAa,GAAKA,GAAcE,EAAW,QAAU,GACrEI,EAAaN,EAAa,GAAKA,GAAcE,EAGnD,OACI,yBAAKb,UAAW,eACZ,yBAAKA,UAAW,SACZ,yBAAKA,UAAW,eACZ,4CAEA,2BAAOA,UAAWe,EAAeG,KAAM,SAAUC,MAAOpB,EAAME,gBAAiBmB,SAjBtE,SAACC,GACtBP,EAAYQ,OAAOD,EAAEE,cAAcJ,QACnCpB,EAAMyB,YAAYF,OAAOD,EAAEE,cAAcJ,QACzCpB,EAAM0B,qBAiBE,yBAAKzB,UAAW,eACZ,8CAEA,2BAAOA,UAAWgB,EAAiBE,KAAM,SAAUC,MAAOpB,EAAMI,kBAAmBiB,SA9BxE,SAACC,GACxBT,EAAcU,OAAOD,EAAEE,cAAcJ,QACrCpB,EAAM2B,cAAcJ,OAAOD,EAAEE,cAAcJ,QAC3CpB,EAAM0B,sBA+BF,yBAAKzB,UAAW,kBACZ,4BAAQO,SAAUU,EAAYjB,UAAW,YAAaK,QAASN,EAAM4B,eAArE,UCsBDC,MArEf,WAAgB,IAAD,EACiBlB,mBAAc,GAD/B,mBACNR,EADM,KACG2B,EADH,OAEiCnB,mBAAS,GAF1C,mBAENT,EAFM,KAEW6B,EAFX,OAGqCpB,mBAAS,GAH9C,mBAGNP,EAHM,KAGa4B,EAHb,KAkCX,OAEI,yBAAK/B,UAAU,OACX,yBAAKA,UAAW,eACZ,kBAAC,EAAD,CACI0B,cAZM,SAACvB,GACnB4B,EAAqB5B,IAYTqB,YAVI,SAACvB,GACjB6B,EAAmB7B,IAUP0B,cAlBM,WAClBE,EAAW1B,IAkBCF,gBAAiBA,EACjBE,kBAAmBA,EACnBsB,eAzBO,WACnBI,EAAW,sBA2BH,yBAAK7B,UAAW,eACZ,yBAAKA,UAAW,SACZ,kBAAC,EAAD,CAAOE,QAASA,EACTD,gBAAiBA,EACjBE,kBAAmBA,KAI9B,yBAAKH,UAAW,kBACZ,kBAAC,EAAD,CAAQM,WAlD5B,WACQJ,EAAUD,GAGV4B,EADgB3B,EAAU,IAgDNM,MA3C5B,WACIqB,EAAW,IA2Ca5B,gBAAiBA,EACjBC,QAASA,SCrDrB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.326e3ab2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype PropsTablo = {\r\n    counter: number\r\n    maxCounterValue: number\r\n    startCounterValue: number\r\n\r\n\r\n}\r\n\r\n\r\nfunction Tablo(props: PropsTablo) {\r\n\r\n\r\n    return (\r\n        <div className={\"tablo-number\"}>\r\n            <span className={props.maxCounterValue === props.counter ? \"limit\" : \"\"}>{props.startCounterValue < 0 || props.startCounterValue >= props.maxCounterValue ? 'Error' : props.counter}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Tablo;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\ntype PropsNumber = {\r\n    addCounter: () => void\r\n    reset: () => void\r\n    counter: number\r\n    maxCounterValue: number\r\n}\r\n\r\n\r\n\r\nfunction Button(props: PropsNumber ) {\r\n    return (\r\n        <div>\r\n            <button className={\"buttonInc\"} onClick={props.addCounter} disabled={props.maxCounterValue === props.counter} >inc</button>\r\n            <button className={\"buttonIReset\"} onClick={props.reset} disabled={props.counter === 0}>reset</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// <div>\r\n//     {data}\r\n// </div>\r\n// <button onClick = { () => { setData(data+1)}}>+</button>\r\n// <button onClick={ () => { setData(data-1)}}>-</button>\r\n\r\nexport default Button;","import React, {ChangeEvent, useState} from 'react';\r\nimport './App.css';\r\n\r\ntype CounterType = {\r\n    getStartValue: (value: number) => void\r\n    getMaxValue: (value: number) => void\r\n    setCountValue: () => void\r\n    startCounterValue: number\r\n    maxCounterValue: number\r\n    setCounterText: () => void\r\n}\r\n\r\n\r\nexport const Counter = (props: CounterType) => {\r\n    const [startValue, setStartValue] = useState(0)\r\n    const [MaxValue, setMaxValue] = useState(5)\r\n\r\n\r\n    const getStartValueInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStartValue(Number(e.currentTarget.value))\r\n        props.getStartValue(Number(e.currentTarget.value))\r\n        props.setCounterText()\r\n    }\r\n\r\n\r\n    const getMaxValueInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setMaxValue(Number(e.currentTarget.value))\r\n        props.getMaxValue(Number(e.currentTarget.value))\r\n        props.setCounterText()\r\n    }\r\n\r\n    let MaxValueInput = MaxValue < 0 || startValue >= MaxValue ? 'error' : ''\r\n    let StartValueInput = startValue < 0 || startValue >= MaxValue ? 'error' : ''\r\n    const disableBtn = startValue < 0 || startValue >= MaxValue\r\n\r\n\r\n    return (\r\n        <div className={\"App-counter\"}>\r\n            <div className={\"tablo\"}>\r\n                <div className={\"tablo-items\"}>\r\n                    <span>Max value:</span>\r\n\r\n                    <input className={MaxValueInput} type={'number'} value={props.maxCounterValue} onChange={getMaxValueInput}/>\r\n\r\n                </div>\r\n                <div className={\"tablo-items\"}>\r\n                    <span>Start value:</span>\r\n\r\n                    <input className={StartValueInput} type={'number'} value={props.startCounterValue} onChange={getStartValueInput}/>\r\n\r\n                </div>\r\n            </div>\r\n            <div className={\"button-wrapper\"}>\r\n                <button disabled={disableBtn} className={\"buttonInc\"} onClick={props.setCountValue}>SET</button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport Tablo from \"./Tablo\";\nimport Button from \"./Buttons\";\nimport {Counter} from './Counter';\n\nfunction App() {\n    let [counter, setCounter] = useState<any>(0)\n    let [maxCounterValue, setMaxCounterValue] = useState(5)\n    let [startCounterValue, setStartCounterValue] = useState(0)\n\n\n    function addCounter() {\n        if (counter < maxCounterValue) {\n\n            let newNumber = counter + 1;\n            setCounter(newNumber)\n        }\n    }\n\n    function reset() {\n        setCounter(0)\n\n    }\n\n    const setCounterText = () => {\n        setCounter('Enter press set')\n    }\n\n    const setCountValue = () => {\n        setCounter(startCounterValue)\n    }\n\n    const getStartValue = (startCounterValue: number) => {\n        setStartCounterValue(startCounterValue)\n    }\n    const getMaxValue = (maxCounterValue: number) => {\n        setMaxCounterValue(maxCounterValue)\n    }\n\n    return (\n\n        <div className=\"App\">\n            <div className={\"App-wrapper\"}>\n                <Counter\n                    getStartValue={getStartValue}\n                    getMaxValue={getMaxValue}\n                    setCountValue={setCountValue}\n                    maxCounterValue={maxCounterValue}\n                    startCounterValue={startCounterValue}\n                    setCounterText={setCounterText}\n\n                />\n                <div className={\"App-counter\"}>\n                    <div className={\"tablo\"}>\n                        <Tablo counter={counter}\n                               maxCounterValue={maxCounterValue}\n                               startCounterValue={startCounterValue}\n\n                               />\n                    </div>\n                    <div className={\"button-wrapper\"}>\n                        <Button addCounter={addCounter}\n                                reset={reset}\n                                maxCounterValue={maxCounterValue}\n                                counter={counter}/>\n                    </div>\n                </div>\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}